rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is a valid studio
    function isValidStudio() {
      return isAuthenticated() && exists(/databases/$(database)/documents/studios/$(request.auth.uid));
    }

    // Studios collection rules
    match /studios/{studioId} {
      allow read: if isAuthenticated() && request.auth.uid == studioId;
    }

    // Leaderboards collection rules
    match /Leaderboards/{leaderboardId} {
      allow read: if true;
      allow write: if isValidStudio() && 
        request.resource.data.studioId == request.auth.uid &&
        request.resource.data.createdBy == request.auth.uid;
    }

    // Events collection rules
    match /events/{eventId} {
      allow read: if isValidStudio();
      allow create: if isValidStudio() 
        && request.resource.data.studioId == request.auth.uid
        && request.resource.data.keys().hasAll(['gameId', 'studioId', 'type', 'data', 'timestamp']);
    }

    // Quests collection rules
    match /quests/{questId} {
      allow read: if isValidStudio();
      allow create, update: if isValidStudio() && 
        request.resource.data.studioId == request.auth.uid;
      allow delete: if isValidStudio() && 
        resource.data.studioId == request.auth.uid;
    }

    // Tournaments collection rules
    match /tournaments/{tournamentId} {
      // Allow reading if the user is authenticated and the tournament belongs to their studio
      allow read: if isAuthenticated() && 
        (resource == null || resource.data.studioId == request.auth.uid);
      
      // Allow creating if user is authenticated and sets their ID as studioId
      allow create: if isAuthenticated() && 
        request.resource.data.studioId == request.auth.uid;
      
      // Allow updates if user owns the tournament
      allow update: if isAuthenticated() && 
        resource.data.studioId == request.auth.uid && 
        request.resource.data.studioId == request.auth.uid;
      
      // Allow deletion if user owns the tournament
      allow delete: if isAuthenticated() && 
        resource.data.studioId == request.auth.uid;
    }
  }
}
